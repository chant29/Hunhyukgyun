///////////////////////////////////////////////////////////////////////////////////////////////////////////
///                                                                                                        
/// Copyright, 2021 PopcornSAR Co., Ltd. All rights reserved.                                              
/// This software is copyright protected and proprietary to PopcornSAR Co., Ltd.                           
/// PopcornSAR Co., Ltd. grants to you only those rights as set out in the license conditions.             
///                                                                                                        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// AUTOSAR VERSION                   : R20-11
/// GENERATED BY                      : PARA, Adaptive Application Generator
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// GENERATED FILE NAME               : actuator.cpp
/// SOFTWARE COMPONENT NAME           : Actuator
/// GENERATED DATE                    : 2024-11-12 08:42:40
///////////////////////////////////////////////////////////////////////////////////////////////////////////
/// INCLUSION HEADER FILES
///////////////////////////////////////////////////////////////////////////////////////////////////////////
#include "actuator/aa/actuator.h"
 
 #include "servo/servo_mgr.hpp"
#include "servo/led_mgr.hpp"

namespace actuator
{
namespace aa
{
 
Actuator::Actuator()
    : m_logger(ara::log::CreateLogger("ACTR", "SWC", ara::log::LogLevel::kVerbose))
    , m_workers(1)
    , m_running(false)
{
}
 
Actuator::~Actuator()
{
}
 
bool Actuator::Initialize()
{
    m_logger.LogVerbose() << "Actuator::Initialize";
    
    bool init{true};
    
    m_ControlData = std::make_shared<actuator::aa::port::ControlData>();
    
    return init;
}
 
void Actuator::Start()
{
    m_logger.LogVerbose() << "Actuator::Start";
    
    m_ControlData->Start();
    
    // run software component
    Run();
}
 
void Actuator::Terminate()
{
    m_logger.LogVerbose() << "Actuator::Terminate";
    m_running = false;
    m_ControlData->Terminate();
}
 
void Actuator::Run()
{
    m_logger.LogVerbose() << "Actuator::Run";
    m_running = true;
    m_workers.Async([this] { TaskReceiveCEventCyclic(); });
    //위에서 worker 2개로 바꾸고 함수 하나더 선언해서 모터로 값 전송해줘도 되고 그냥 하나로 데이터 받고 모터로 값 전송까지 해도 상관없음
    m_workers.Wait();
}
 
// ControlData CEvent의 Cyclic 수신처리에 대한 수행
void Actuator::TaskReceiveCEventCyclic()
{
    m_ControlData->SetReceiveEventCEventHandler([this](const auto& sample)
    {
        OnReceiveCEvent(sample);
    });
    m_ControlData->ReceiveEventCEventCyclic();
}

// ControlData CEvent를 받았을시의 처리 함수
void Actuator::OnReceiveCEvent(const deepracer::service::controldata::proxy::events::CEvent::SampleType& sample)
{
    auto servoMgr = std::make_unique<PWM::ServoMgr>();
    auto ledMgr = std::make_unique<PWM::LedMgr>();
    
    float cur_motor = 0;
    float cur_servo = 0;
    while (m_running)
    {
        
        servoMgr->servoSubscriber(m_ControlData.SpeedServo, m_ControlData.SteerServo); 
    }
    
}
 
} /// namespace aa
} /// namespace actuator

